Q1 - Fix or improve the implementation of the below methods

local function releaseStorage(player)
	player:setStorageValue(1000, -1)
end

function onLogout(player)
	if player:getStorageValue(1000) == 1 then
		addEvent(releaseStorage, 1000, player)
	end
	return true
end

--Answer: Replaced magic number "1000" with s_Slot; figured storageValue refers
--to an inventory storage slot ranging from 0 (first item) to maxStorageSlots.
--Original code would only release slot 1000
local function releaseStorage(s_Slot, player)
	player:setStorageValue(s_Slot, -1)
end

function onLogout(maxStorageSlots, player)
	for i = 0, maxStorageSlots, 1
	do
		if player:getStorageValue(i) == 1 then
			addEvent(releaseStorage, i, player)
		end
	end
end

Q2 - Fix or improve the implementation of the below method

function printSmallGuildNames(memberCount)
-- this method is supposed to print names of all guilds that have less than memberCount max members
	local selectGuildQuery = "SELECT name FROM guilds WHERE max_members < %d;"
	local resultId = db.storeQuery(string.format(selectGuildQuery, memberCount))
	local guildName = result.getString("name")
	print(guildName)
end

--Answer: Variable naming error with resultId not actually being referred to in 
--line 5.
function printSmallGuildNames(memberCount)
	local selectGuildQuery = "SELECT name FROM guilds WHERE max_members < %d;"
	local resultId = db.storeQuery(string.format(selectGuildQuery, memberCount)
	local guildName = resultId.getString("name")
	print(guildName)
end

Q3 - Fix or improve the name and the implementation of the below method

function do_sth_with_PlayerParty(playerId, membername)
	player = Player(playerId)
	local party = player:getParty()

	for k,v in pairs(party:getMembers()) do
		if v == Player(membername) then
			party:removeMember(Player(membername))
		end
	end
end

--Answer: Function has to do with removing party members from a party, so should be
--named appropriately (removeMembersFromPlayerParty should suffice). 
--Also changed name of membername to memberName so as to better follow naming 
--conventions for variables

function removeMembersFromPlayerParty(playerId, memberName)
	player = Player(playerId)
	local party = player:getParty()

	for k,v in pairs(party:getMembers()) do
		if v == Player(memberName) then
			party:removeMember(Player(memberName))
		end
	end
end

Q4 - Assume all method calls work fine. Fix the memory leak issue in below method

void Game::addItemToPlayer(const std::string& recipient, uint16_t itemId)
{
	Player* player = g_game.getPlayerByName(recipient);
	if (!player) {
		player = new Player(nullptr);
		if (!IOLoginData::loadPlayerByName(player, recipient)) {
			return;
		}
	}

	Item* item = Item::CreateItem(itemId);
	if (!item) {
		return;
	}

	g_game.internalAddItem(player->getInbox(), item, INDEX_WHEREEVER, FLAG_NOLIMIT);

	if (player->isOffline()) {
		IOLoginData::savePlayer(player);
	}
}

/*
Answer: call delete() on player to free allocated memory in block where player
is constructed. delete() should be called before a return call if a new player was
constructed in this function.
*/

void Game::addItemToPlayer(const std::string& recipient, uint16_t itemId)
{
	bool player_not_found = false
	Player* player = g_game.getPlayerByName(recipient);
	if (!player) {
		player_not_found = true
		player = new Player(nullptr);
		if (!IOLoginData::loadPlayerByName(player, recipient)) {
			delete(player)
			return;
		}
	}

	Item* item = Item::CreateItem(itemId);
	if (!item) {
		if (player_not_found) {
			delete(player)
		}
		return;
	}

	g_game.internalAddItem(player->getInbox(), item, INDEX_WHEREEVER, FLAG_NOLIMIT);

	if (player->isOffline()) {
		IOLoginData::savePlayer(player);
	}

	if (player_not_found) {
		delete(player)
	}
}